This tests if preemption works correctly when a task with a higher priority wakes up. Child A has higher
priority and executes until it starts to sleep (age threshold is high again). Child B gets the CPU while A
is sleeping. When A wakes up, it gets the CPU again and executes until completion.

You shouldn't have the situation where B is executing while A is awake. If you instrument your enqueue_task_dummy
and dequeue_task_dummy to print something to console, for example:

printk(KERN_CRIT "enqueue: %d\n",p->pid);

then the output should look something like this:

enqueue: 980
enqueue: 981
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdequeue: 980
BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBenqueue: 980
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdequeue: 980
enqueue: 980
dequeue: 980
BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBdequeue: 981
enqueue: 981
dequeue: 981

The first pair of enqueues is when the two tasks first enter dummy scheduler, during the setpriority system call.
Then A executes until it is dequeued for the sleep.
Then B executes until A wakes up and is enqueued again.
Then A executes until end and goes through dequeue-enqueue-dequeue sequence for deactivation; then the same for B.

